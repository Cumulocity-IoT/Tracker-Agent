apiVersion: apps/v1
kind: Deployment
metadata:
  name: c8y-tracker-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: c8y-tracker-agent
  template:
    metadata:
      labels:
        app: c8y-tracker-agent
    spec:
      containers:
      - name: c8y-tracker-agent
        image: tcp-agent:0.0.1  # Replace with your Docker image
        env:
        - name: C8Y_BOOTSTRAP_TENANT
          value: "t2105"
        - name: C8Y_DEFAULT_TENANT
          value: "t2105"
        - name: C8Y_SUBSCRIBED_TENANTS
          value: "t2105"
        - name: C8Y_MICROSERVICE_ISOLATION
          value: "MULTI_TENANT"
        - name: C8Y_BOOTSTRAP_USER
          value: "servicebootstrap_tcp-agent"
        - name: C8Y_BOOTSTRAP_PASSWORD
          value: "Gcsu8W5gCvKMI0y8ME3CO3mqS35Zpf95"
        - name: C8Y_BOOTSTRAP_REGISTER
          value: "true"
        - name: C8Y_BASEURL
          value: "https://dev-tenant.iot.tracking.me"
        ports:
        - containerPort: 8888  # TCP Port
        - containerPort: 8080  # HTTP Port
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: "/health"
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: "/health"
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: c8y-tracker-agent-service
spec:
  selector:
    app: c8y-tracker-agent
  type: NodePort  # Exposes service via a NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30000  # Exposes service on all cluster nodes at port 30080
    - name: tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
      nodePort: 30001  # Exposes TCP service at port 30888
---